#!/usr/bin/env python

#    Voxel slices
#    Copyright (C) 2019  Tristram Lett

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import numpy as np
import argparse as ap
import nibabel as nib

from ants_tbss.functions import autothreshold, draw_outline, nonempty_coordinate_range, correct_image, write_padded_png, linear_cm, outlay_png, mask_png, cm_hide_lower, write_colorbar


DESCRIPTION = "Creates images slices with optional masking images"

def getArgumentParser(ap = ap.ArgumentParser(description = DESCRIPTION)):
	ap.add_argument("-i", "--input",
		help = "[Required] Input images(s) in nifti, minc, or mgh.", 
		nargs = '+',
		type = str,
		required = True,
		metavar = 'image')
	group = ap.add_mutually_exclusive_group(required=True)
	group.add_argument("-mo", "--addmaskoutline",
		help = "Add masking image for creating a red outline", 
		nargs = 1,
		type = str,
		metavar = 'image')
	group.add_argument("-mi", "--addoutlineimage",
		help = "Add an image for creating a red outline set by the threshold algorithm based on two thresholds", 
		nargs = 1,
		type = str,
		metavar = 'image')
	group.add_argument("-si", "--addstatisticimage",
		help = "Overlay a statistic image", 
		nargs = 1,
		type = str,
		metavar = 'image')
	group.add_argument("-nm", "--nomask",
		help = "Binarizes each input image to create a mask.", 
		action = 'store_true')
	ap.add_argument("-no", "--nooutline",
		help = "Do not create a mask outline.",
		action = 'store_true')
	ap.add_argument("-neg", "--statsneg",
		help = "Must be used with -si. Overlay the negative statistic image too.",
		action = 'store_true')
	ap.add_argument("-ta", "--thesholdalgorithm",
		help = "Thresholding method (Default is otsu).",
		type = str,
		choices = ['otsu', 'otsu_p', 'li', 'li_p', 'yen', 'yen_p', 'zscore', 'zscore_p'])
	ap.add_argument("-st", "--setthreshold",
		help = "Manually set the values for thresholding. -st {lower} {higher}.",
		nargs = 2,
		type = str,
		metavar = ['lowthreshold','highthreshold'])
	ap.add_argument("-od", "--outputdir",
		help = "[Optional] Output directory. -od {/path/to/ouputdirectory}",
		nargs = 1,
		type = str,
		metavar = 'str')
	ap.add_argument("-cm", "--colourmap",
		help = "The output colour map for input image. -cm {colourmapname}, Default: %(default)s) ",
		nargs = 1,
		default = ['viridis'],
		metavar = 'str')
	ap.add_argument("-ns", "--numberofslices",
		help = "The number of slices in each direction. -ns {# slices}. Default: %(default)s)",
		nargs = 1,
		default = [3],
		metavar = 'int')
	return ap

def run(opts):

	numslices = int(opts.numberofslices[0]) + 2
	colourmapname = opts.colourmap[0]

	thr_alg = 'otsu'
	if opts.thesholdalgorithm:
		thr_alg = opts.thesholdalgorithm

	if opts.addmaskoutline:
		mask = nib.load(opts.addmaskoutline[0])
		mask_data = mask.get_fdata()
		affine = mask.affine
	elif opts.addstatisticimage:
		aimg = nib.load(opts.addstatisticimage[0])
		aimg_data = aimg.get_fdata()
		mask_data = np.zeros_like(aimg_data)
		mask_data[aimg_data!=0]=1
		affine = aimg.affine
	elif opts.addoutlineimage:
		aimg = nib.load(opts.addoutlineimage[0])
		aimg_data = aimg.get_fdata()
		mask_data = np.zeros_like(aimg_data)
		mask_data[aimg_data!=0]=1
		affine = aimg.affine
	else:
		pass

	if not opts.nomask:

		x_rng, y_rng, z_rng = nonempty_coordinate_range(mask_data)
		x_space = np.round(np.linspace(x_rng[0]+10, x_rng[1]-10, numslices))
		y_space = np.round(np.linspace(y_rng[0]+10, y_rng[1]-10, numslices))
		z_space = np.round(np.linspace(z_rng[0]+10, z_rng[1]-10, numslices))
		native_space = []
		for i in range(len(x_space)):
			native_space.append(nib.affines.apply_affine(affine,[x_space[i],y_space[i],z_space[i]]))
		native_space = np.array(native_space)

		x_space = x_space[1:-1]
		y_space = y_space[1:-1]
		z_space = z_space[1:-1]

		# for parallelization
		rand_value = str(np.random.randint(1,99999999)).zfill(8)
		mask_name = rand_value + '_mask.png'
		if opts.addoutlineimage:
			lowmask_name = rand_value + '_lowmask.png'

		write_padded_png(mask_data, x_space, y_space, z_space, mask_name, cmap = 'binary_r')
		correct_image(mask_name)

	if opts.addoutlineimage:
		thrs1 = autothreshold(aimg_data, thr_alg)[0]
		thrs2 = autothreshold(aimg_data[aimg_data>thrs1], thr_alg)[0]
		low = np.zeros_like(aimg_data)
		low[aimg_data>thrs2]=1
		write_padded_png(low, x_space, y_space, z_space, lowmask_name, cmap = "binary_r")
		correct_image(lowmask_name)

	temp_masks = []
	for input_image in opts.input:
		img = nib.load(input_image)
		img_data = img.get_fdata()

		# This creates a non-zero mask for each input image
		if opts.nomask:

			mask_data = np.zeros_like(img_data)
			mask_data[img_data!=0] = 1
			affine = img.affine
			x_rng, y_rng, z_rng = nonempty_coordinate_range(mask_data)
			x_space = np.round(np.linspace(x_rng[0]+10, x_rng[1]-10, numslices))
			y_space = np.round(np.linspace(y_rng[0]+10, y_rng[1]-10, numslices))
			z_space = np.round(np.linspace(z_rng[0]+10, z_rng[1]-10, numslices))
			native_space = []
			for i in range(len(x_space)):
				native_space.append(nib.affines.apply_affine(affine,[x_space[i],y_space[i],z_space[i]]))
			native_space = np.array(native_space)

			x_space = x_space[1:-1]
			y_space = y_space[1:-1]
			z_space = z_space[1:-1]

			# for parallelization
			rand_value = str(np.random.randint(1,99999999)).zfill(8)
			mask_name = rand_value + '_mask.png'
			temp_masks.append(mask_name)

			write_padded_png(mask_data, x_space, y_space, z_space, mask_name, cmap = 'binary_r')
			correct_image(mask_name)


		outname = input_image.replace('.nii','')
		outname = outname.replace('.gz','')
		outname = outname.replace('.','_')
		outname = outname.replace('/','_') + ".png"
		write_padded_png(img_data, x_space, y_space, z_space, outname,
								cmap = cm_hide_lower(colourmapname))
		mask_png(img_png = outname, mask_png = mask_name, remove_mask = False)
		
		if opts.addstatisticimage:
			statmask_name = rand_value + '_stat.png'
			if opts.setthreshold:
				thrs1 = float(opts.setthreshold[0])
				thrs2 = float(opts.setthreshold[1])
			else:
				thrs1 = autothreshold(aimg_data, thr_alg)[0]
				thrs2 = autothreshold(aimg_data[aimg_data>thrs1], thr_alg)[0]
			cmap_ry = linear_cm([1,0,0],[1,1,0])

			write_padded_png(aimg_data, x_space, y_space, z_space, statmask_name, vmin = thrs1, vmax = thrs2, cmap = cmap_ry)
			overlayname = os.path.basename(opts.addstatisticimage[0]).replace('/','_') + outname
			overlayname = overlayname.replace('.nii','')
			overlayname = overlayname.replace('.gz','')
			outlay_png(img_png = outname, outlay_png = statmask_name, outname = overlayname, cleanup = True)
			write_colorbar(threshold = [thrs1, thrs2], input_cmap = cmap_ry, name_cmap = overlayname[:-4], outtype = 'png', transparent = True)
			outname = overlayname
			if opts.statsneg:
				cmap_blb = linear_cm([0,0,1],[0,1,1])
				write_padded_png(aimg_data*-1, x_space, y_space, z_space, statmask_name, vmin = thrs1, vmax = thrs2, cmap = cmap_blb)
				overlayname = os.path.basename(opts.addstatisticimage[0]).replace('/','_') + outname
				overlayname = overlayname.replace('.nii','')
				overlayname = overlayname.replace('.gz','')
				outlay_png(img_png = outname, outlay_png = statmask_name, outname = overlayname, cleanup = True)
				write_colorbar(threshold = [thrs1, thrs2], input_cmap = cmap_blb, name_cmap = "neg_" + overlayname[:-4], outtype = 'png', transparent = True)

		elif opts.addoutlineimage:
			draw_outline(outname, mask_name)
			draw_outline(outname, lowmask_name)
			print("Input image : %s" % outname)
			print("Mean white matter = %1.5e" % np.mean(img_data*low))
			print("Mean grey matter = %1.5e" % np.mean(img_data*(mask_data-low)))
		else:
			if not opts.nooutline:
				draw_outline(outname, mask_name)
		if opts.outputdir:
			outdir = opts.outputdir[0]
			if outdir[:-1] != '/':
				outdir += '/'
			os.system("mkdir -p %s; mv %s %s" % (outdir, outname, outdir))
			if opts.addstatisticimage:
				os.system("mv %s_colorbar.png %s" % (overlayname[:-4], outdir))
	# delete mask(s)
	if opts.nomask:
		for mask_name in temp_masks:
			os.remove(mask_name)
	else:
		os.remove(mask_name)
	if opts.addoutlineimage:
		if os.path.exists(lowmask_name):
			os.remove(lowmask_name)
	if opts.addstatisticimage:
		if os.path.exists(statmask_name):
			os.remove(statmask_name)

if __name__ == "__main__":
	parser = getArgumentParser()
	opts = parser.parse_args()
	run(opts)
